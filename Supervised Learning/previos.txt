import pygame
pygame.init()

screen=pygame.display.set_mode((0,0))
pygame.display.set_caption("Train Management System")
#colors
black=(0,0,0)
red=(255,0,0)
green=(0,255,0)
blue=(0,191,255)
yellow=(255,255,0)
orange=(255,165,0)
grey=(128,128,128)

class Block:
    def __init__(self,surface,color,start,end,width):
        self.surface=surface
        self.color=color
        self.start=start
        self.end=end
        self.width=width
        
    def get_signal(self):
        return self.color
    
    def switch_signal(self,value):
        self.color=value
            
    def create_block(self):
        pygame.draw.line(self.surface,self.color,self.start,self.end,self.width)
        
    def get_block_start(self):
        return self.start[0]
    
    def get_block_end(self):
        return self.end[0]
        
class Train:
    def __init__(self,surface,color,center,radius,status):
        self.surface=surface
        self.color=color
        self.center=center
        self.radius=radius
        self.status=status

    def create_train(self):
        pygame.draw.circle(self.surface,self.color,self.center,self.radius)
    
    def get_center(self):
        return self.center[0]

    def get_status(self):
       return self.status
    
    def update_status(self,value):
        self.status=value
            
 
    
   
class Station:
    def __init__(self,surface,color,rect):
        self.surface=surface
        self.color=color
        self.rect=rect
    
    def create_station(self):
        pygame.draw.rect(self.surface,self.color,self.rect,border_radius=5)
        
        
    
        
def line_generator(line_start,block_length,block_count,surface):
    line=[]
    sx=line_start[0]
    sy=line_start[1]
    ex=sx+block_length
    ey=line_start[1]
    while block_count>0:
        block=Block(surface,(0,255,0),(sx,sy),(ex,ey),7)
        line.append(block)
        sx=ex+2
        ex=sx+block_length
        block_count-=1
    return line
        
line=line_generator([100,500],50,50,screen)
line[25].switch_signal(red)
line[24].switch_signal(orange)
x,y=100,500
run=True
while run:
    screen.fill(black)
    for i in line:
        i.create_block()
          
    train=Train(screen,blue,(x,y),7,True)
    train.create_train()
    for k in range(len(line)):
        if train.get_center()>=line[k].get_block_start() and train.get_center() <=line[k].get_block_end():
            if k>=0:
                line[k-0].switch_signal(red)
            if k>=2:
                line[k-1].switch_signal(orange)
            if k>=3:
                line[k-2].switch_signal(yellow)
                
            if line[k+1].get_signal()==red:
                if train.get_center()>=((line[k].get_block_start() +line[k].get_block_end())//2):
                    x=train.get_center()
                    train.update_status(False)
            elif line[k+1].get_signal()==orange:
                x-=0.25
            elif line[k+1].get_signal()==yellow:
                x-=0.15
        elif train.get_center() >= line[k].get_block_end():
            line[k].switch_signal(green)
    if train.get_status():    
                x+=0.35
        
            
        

    
    pygame.display.flip()
    for events in pygame.event.get():
        if events.type == pygame.QUIT:
            run=False
pygame.quit()

    
